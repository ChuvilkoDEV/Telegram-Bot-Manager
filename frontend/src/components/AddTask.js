import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import '../css/AddTask.css';

// –°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–∏—è—Ö
const reactionsList = [
  'üëç', 'üëé', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè', 'üòÅ', 'ü§î', 'ü§Ø', 'üò±', 'ü§¨', 'üò¢', 'üéâ', 'ü§©', 'ü§Æ', 'üí©', 'üôè',
  'üëå', 'üïä', 'ü§°', 'ü•±', 'ü•¥', 'üòç', 'üê≥', '‚ù§Ô∏èüî•', 'üåö', 'üå≠', 'üíØ', 'ü§£', '‚ö°Ô∏è', 'üçå', 'üèÜ', 'üíî', 'ü§®',
  'üòê', 'üçì', 'üçæ', 'üíã', 'üñï', 'üòà', 'üò¥', 'üò≠', 'ü§ì', 'üëª', 'üë®üíª', 'üëÄ', 'üéÉ', 'üôà', 'üòá', 'üò®', 'ü§ù',
  '‚úçÔ∏è', 'ü§ó', 'üéÖ', 'üéÑ', '‚òÉÔ∏è', 'üíÖ', 'ü§™', 'üóø', 'üÜí', 'üíò', 'üôâ', 'ü¶Ñ', 'üòò', 'üíä', 'üôä', 'üòé', 'üëæ',
  'ü§∑‚ôÇÔ∏è', 'ü§∑', 'ü§∑‚ôÄÔ∏è', 'üò°'
];

const taskTypeOptions = {
  'view': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
  'react': '–†–µ–∞–∫—Ü–∏–∏',
  'subs': '–ü–æ–¥–ø–∏—Å–∫–∏'
};

const AddTask = ({ sessions = [] }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const [taskData, setTaskData] = useState({
    taskType: '',
    taskAuto: false,
    taskTarget: '',
    group: '',
    taskCountActions: 1,
    taskTimeOut: 1,
    countActionPerTimeout: 1,
    percentWave: 0,
    percentMarkupSpread: 0,
    taskChannelId: '',
    taskReactions: [],
  });
  const [loading, setLoading] = useState(false);
  const [showReactionsList, setShowReactionsList] = useState(false);
  const [message, setMessage] = useState(null);
  const [isError, setIsError] = useState(false);
  const [uniqueGroups, setUniqueGroups] = useState([]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–∑ sessions
  useEffect(() => {
    console.log(sessions)
    if (sessions && sessions.length > 0) {
      const groups = Array.from(new Set(sessions.map(session => session.group)));
      setUniqueGroups(groups);
    }
  }, [sessions]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setTaskData((prevData) => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  const transformData = (data) => ({
    ...data,
    taskCountActions: Number(data.taskCountActions),
    taskTimeOut: Number(data.taskTimeOut),
    countActionPerTimeout: Number(data.countActionPerTimeout),
    percentWave: Number(data.percentWave),
    percentMarkupSpread: Number(data.percentMarkupSpread),
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const handleAddTaskSubmit = async (e) => {
    e.preventDefault();
    if (taskData.taskType === 'subs' && !taskData.taskChannelId) {
      setMessage('ID –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫');
      setIsError(true);
      return;
    }
    setLoading(true);
    const token = Cookies.get('token');

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const transformedData = transformData(taskData);

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const data = {
      token,
      task_type: transformedData.taskType,
      task_target: transformedData.taskTarget,
      task_count_actions: transformedData.taskCountActions,
      task_obj: transformedData.taskReactions,
      task_time_out: transformedData.taskTimeOut,
      task_channel_id: transformedData.taskChannelId,
      task_auto: transformedData.taskAuto,
      count_action_per_timeout: transformedData.countActionPerTimeout,
      percetn_wave: transformedData.percentWave,
      percent_markup_spread: transformedData.percentMarkupSpread,
      group: transformedData.group,
    };

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await axios.post('http://147.45.111.226:8000/api/addTask', data, {
        headers: { 'Content-Type': 'application/json' },
      });
      if (response.data.status === 'fail') 
        throw new Error(response.data.message)
      setMessage('–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      setIsError(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
      setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.');
      setIsError(true);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
  const handleTaskTypeChange = (e) => {
    const { value } = e.target;
    setTaskData((prevData) => ({
      ...prevData,
      taskType: value,
      taskChannelId: value === 'subs' ? prevData.taskChannelId : '',
      taskAuto: value === 'react' || value === 'view' ? prevData.taskAuto : false,
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
  const handleReactionsChange = (reaction) => {
    setTaskData((prevData) => ({
      ...prevData,
      taskReactions: prevData.taskReactions.includes(reaction)
        ? prevData.taskReactions.filter((r) => r !== reaction)
        : [...prevData.taskReactions, reaction],
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö —Ä–µ–∞–∫—Ü–∏–π
  const handleSelectAllReactions = () => {
    setTaskData((prevData) => ({
      ...prevData,
      taskReactions: prevData.taskReactions.length === reactionsList.length
        ? []
        : reactionsList,
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const renderInput = (label, name, type = 'text', additionalProps = {}) => (
    <div className="add-task-form-group">
      <label>{label}</label>
      <input
        type={type}
        name={name}
        value={taskData[name]}
        onChange={handleChange}
        className="add-task-form-control"
        {...additionalProps}
      />
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–ª—è —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
  const renderReactionsField = () => (
    <div className="add-task-form-group">
      <label>–†–µ–∞–∫—Ü–∏–∏</label>
      <div
        className="add-task-reactions-field"
        onClick={() => setShowReactionsList(!showReactionsList)}
      >
        {taskData.taskReactions.length > 0
          ? taskData.taskReactions.join(' ')
          : '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏'}
      </div>
      {showReactionsList && (
        <div className="add-task-reactions-popup">
          {reactionsList.map((reaction) => (
            <div key={reaction} className="add-task-reaction-item">
              <button
                type="button"
                className="add-task-reaction-button"
                onClick={() => handleReactionsChange(reaction)}
              >
                {reaction}
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={handleSelectAllReactions}
            className="add-task-btn add-task-btn-secondary"
          >
            {taskData.taskReactions.length === reactionsList.length ? '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö' : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'}
          </button>
        </div>
      )}
    </div>
  );

  return (
    <div className="content">
      <div className="add-task-form-container">
        <div className="add-task-form-section">
          <h2>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</h2>
          <form onSubmit={handleAddTaskSubmit}>
            <div className="add-task-form-group">
              <label>–¢–∏–ø</label>
              <select
                name="taskType"
                value={taskData.taskType}
                onChange={handleTaskTypeChange}
                className="add-task-form-control"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                <option value="react">–†–µ–∞–∫—Ü–∏–∏</option>
                <option value="subs">–ü–æ–¥–ø–∏—Å–∫–∏</option>
                <option value="view">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</option>
              </select>
            </div>
            {taskData.taskType === 'react' && renderReactionsField()}
            {(taskData.taskType === 'react' || taskData.taskType === 'view') && (
              <div className="add-task-form-group-checkbox">
                <label>
                  <input
                    type="checkbox"
                    name="taskAuto"
                    checked={taskData.taskAuto}
                    onChange={handleChange}
                    className="add-task-form-control-checkbox"
                  />
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </label>
              </div>
            )}
            {renderInput('ID –∫–∞–Ω–∞–ª–∞', 'taskChannelId', 'text', {
              required: taskData.taskType === 'subs',
              disabled: !(taskData.taskType === 'subs' || (taskData.taskType !== 'subs' && taskData.taskAuto)),
            })}
            {renderInput('–¶–µ–ª—å', 'taskTarget')}
            <div className="add-task-form-group">
              <label>–ì—Ä—É–ø–ø–∞</label>
              <select
                name="group"
                value={taskData.group}
                onChange={handleChange}
                className="add-task-form-control"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</option>
                {uniqueGroups.map((group) => (
                  <option key={group} value={group}>
                    {group}
                  </option>
                ))}
              </select>
            </div>
            {renderInput('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π', 'taskCountActions', 'number', { min: 1, max: 3635 })}
            {renderInput('–¢–∞–π–º-–∞—É—Ç', 'taskTimeOut', 'number')}
            {renderInput('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Ç–∞–π–º-–∞—É—Ç', 'countActionPerTimeout', 'number')}
            {renderInput('–í–æ–ª–Ω–∞ %', 'percentWave', 'number')}
            {renderInput('–ú–∞—Ä–∂–∞ %', 'percentMarkupSpread', 'number')}
            <button type="submit" className="add-task-btn add-task-btn-primary" disabled={loading}>
              {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
            {message && (
              <div className={`add-task-message ${isError ? 'add-task-error' : 'add-task-success'}`}>
                {message}
              </div>
            )}
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddTask;
